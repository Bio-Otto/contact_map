"""
setup.py for contact_map
"""
from setuptools import setup
import os
import subprocess
import inspect

####################### USER SETUP AREA #################################
# * IS_RELEASED: whether this is a release
# * DEV_NUM: .dev version number (for us, always 0)
VERSION = "0.1.3"
IS_RELEASE = False
DEV_NUM = 0  # always 0: we don't do public (pypi) .dev releases
PRE_TYPE = ""  # a, b, or rc (although we rarely release such versions)
PRE_NUM = 0

# REQUIREMENTS should list any required packages
REQUIREMENTS=['future', 'numpy', 'mdtraj', 'scipy', 'pandas']

# This DESCRIPTION is only used if a README.rst hasn't been made from the
# markdown version
DESCRIPTION="""
Contact maps based on MDTraj; useful for studying for intramolecular and
intermolecular contacts (atom-atom or residue-residue) from simulations of
biomolecular systems. For a more detailed description, see package
documentation at http://contact-map.readthedocs.io/
"""
####################### USER SETUP AREA #################################


# * VERSION: the release version number
# * __version__: ?? how is this used ??
# * PACKAGE_VERSION: the version used in setup.py info
PACKAGE_VERSION = VERSION
if PRE_TYPE != "":
    PACKAGE_VERSION += "." + PRE_TYPE + str(PRE_NUM)
if not IS_RELEASE:
    PACKAGE_VERSION += ".dev" + str(DEV_NUM)
__version__ = PACKAGE_VERSION

if os.path.isfile('README.rst'):
    DESCRIPTION = open('README.rst').read()

################################################################################
# Writing version control information to the module
################################################################################
def get_git_version():
    """
    Return the git hash as a string.

    Apparently someone got this from numpy's setup.py. It has since been
    modified a few times.
    """
    # Return the git revision as a string
    # copied from numpy setup.py
    def _minimal_ext_cmd(cmd):
        # construct minimal environment
        env = {}
        for k in ['SYSTEMROOT', 'PATH']:
            v = os.environ.get(k)
            if v is not None:
                env[k] = v
        # LANGUAGE is used on win32
        env['LANGUAGE'] = 'C'
        env['LANG'] = 'C'
        env['LC_ALL'] = 'C'
        out = subprocess.Popen(
            cmd, stdout=subprocess.PIPE, env=env).communicate()[0]
        return out

    try:
        git_dir = os.path.dirname(os.path.realpath(__file__))
        out = _minimal_ext_cmd(['git', '-C', git_dir, 'rev-parse', 'HEAD'])
        GIT_REVISION = out.strip().decode('ascii')
    except OSError:
        GIT_REVISION = 'Unknown'

    return GIT_REVISION

def write_version_py(filename='contact_map/version.py', debug=False):
    cnt = """
# This file is automatically generated by setup.py
import os
import subprocess

# this is automatically generated from the code in setup.py
%(git_version_code)s

short_version = '%(version)s'
version = '%(version)s'
installed_git_revision = '%(git_revision)s'
full_version = version + '+g' + installed_git_revision[:7]
release = %(is_release)s
git_revision = 'Unknown'  # default

if not release:
    git_revision = get_git_version()
    if git_revision != 'Unknown':
        full_version = version + '+g' + git_revision[:7]
    version = full_version
"""
    # Adding the git rev number needs to be done inside write_version_py(),
    # otherwise the import of numpy.version messes up the build under Python 3.
    git_version_code = inspect.getsource(get_git_version)
    if os.path.exists('.git'):
        GIT_REVISION = get_git_version()
    else:
        GIT_REVISION = 'Unknown'

    content = cnt % {'version': PACKAGE_VERSION,
                     'git_revision': GIT_REVISION,
                     'is_release': str(IS_RELEASE),
                     'git_version_code': str(git_version_code)}

    with open(filename, 'w') as version_file:
        version_file.write(content)


################################################################################
# Installation
################################################################################

if __name__ == "__main__":
    write_version_py()
    setup(
        name="contact_map",
        author="David W.H. Swenson",
        author_email="dwhs@hyperblazer.net",
        version=PACKAGE_VERSION,
        license="LGPL",
        url="http://github.com/dwhswenson/contact_map",
        packages=['contact_map', 'contact_map.tests'],
        package_dir= {
            'contact_map': 'contact_map',
            'contact_map.tests': 'contact_map/tests'
        },
        package_data={'contact_map': ['tests/*pdb']},
        ext_modules=[],
        scripts=[],
        description="Contact maps based on MDTraj",
        long_description=DESCRIPTION,
        platforms=['Linux', 'Mac OS X', 'Unix', 'Windows'],
        install_requires=REQUIREMENTS,
        requires=REQUIREMENTS,
        tests_require=["pytest", "pytest-cov", "python-coveralls"],
        classifiers=[
            'Development Status :: 4 - Beta',
            'Intended Audience :: Science/Research',
            'License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)',
            'Operating System :: POSIX',
            'Operating System :: Microsoft :: Windows',
            'Programming Language :: Python :: 2.7',
            'Programming Language :: Python :: 3',
            'Topic :: Scientific/Engineering :: Bio-Informatics',
            'Topic :: Scientific/Engineering :: Chemistry'
        ]
    )


